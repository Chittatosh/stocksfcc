# source: https://us1.prisma.sh/chittatosh-undirwade-78f1b4/stocksfcc/dev
# timestamp: Sun May 06 2018 05:23:21 GMT+0530 (India Standard Time)

type AggregateStock {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createStock(data: StockCreateInput!): Stock!
  updateStock(data: StockUpdateInput!, where: StockWhereUniqueInput!): Stock
  deleteStock(where: StockWhereUniqueInput!): Stock
  upsertStock(where: StockWhereUniqueInput!, create: StockCreateInput!, update: StockUpdateInput!): Stock!
  updateManyStocks(data: StockUpdateInput!, where: StockWhereInput): BatchPayload!
  deleteManyStocks(where: StockWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  stocks(where: StockWhereInput, orderBy: StockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stock]!
  stock(where: StockWhereUniqueInput!): Stock
  stocksConnection(where: StockWhereInput, orderBy: StockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StockConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Stock implements Node {
  id: ID!
  symbol: String!
}

"""A connection to a list of items."""
type StockConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StockEdge]!
  aggregate: AggregateStock!
}

input StockCreateInput {
  symbol: String!
}

"""An edge in a connection."""
type StockEdge {
  """The item at the end of the edge."""
  node: Stock!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StockOrderByInput {
  id_ASC
  id_DESC
  symbol_ASC
  symbol_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StockPreviousValues {
  id: ID!
  symbol: String!
}

type StockSubscriptionPayload {
  mutation: MutationType!
  node: Stock
  updatedFields: [String!]
  previousValues: StockPreviousValues
}

input StockSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StockSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StockWhereInput
}

input StockUpdateInput {
  symbol: String
}

input StockWhereInput {
  """Logical AND on all given filters."""
  AND: [StockWhereInput!]

  """Logical OR on all given filters."""
  OR: [StockWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StockWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  symbol: String

  """All values that are not equal to given value."""
  symbol_not: String

  """All values that are contained in given list."""
  symbol_in: [String!]

  """All values that are not contained in given list."""
  symbol_not_in: [String!]

  """All values less than the given value."""
  symbol_lt: String

  """All values less than or equal the given value."""
  symbol_lte: String

  """All values greater than the given value."""
  symbol_gt: String

  """All values greater than or equal the given value."""
  symbol_gte: String

  """All values containing the given string."""
  symbol_contains: String

  """All values not containing the given string."""
  symbol_not_contains: String

  """All values starting with the given string."""
  symbol_starts_with: String

  """All values not starting with the given string."""
  symbol_not_starts_with: String

  """All values ending with the given string."""
  symbol_ends_with: String

  """All values not ending with the given string."""
  symbol_not_ends_with: String
}

input StockWhereUniqueInput {
  id: ID
  symbol: String
}

type Subscription {
  stock(where: StockSubscriptionWhereInput): StockSubscriptionPayload
}
